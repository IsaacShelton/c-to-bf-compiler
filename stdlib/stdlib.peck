
u16 u16_add_u8s(u8 a, u8 b){
    u16 result;
    u8 lower = a + b;
    result._0 = lower;
    result._1 = (u8) (lower < a || lower < b); // overflow bit
    return result;
}

u16 u16_add(u16 a, u16 b){
    u16 result = u16_add_u8s(a._0, b._0);
    result._1 += a._1 + b._1;
    return result;
}

u16 u16_sub(u16 a, u16 b){
    u16 negative_b = u16_add(u16_bit_neg(b), 1);
    return u16_add(a, negative_b);
}

u16 u16_bit_and(u16 a, u16 b){
    u16 result;
    result._1 = a._1 & b._1;
    result._0 = a._0 & b._0;
    return result;
}

u16 u16_bit_or(u16 a, u16 b){
    u16 result;
    result._1 = a._1 | b._1;
    result._0 = a._0 | b._0;
    return result;
}

u16 u16_bit_xor(u16 a, u16 b){
    u16 result;
    result._1 = a._1 ^ b._1;
    result._0 = a._0 ^ b._0;
    return result;
}

u16 u16_bit_neg(u16 value){
    value._0 = ~value._0;
    value._1 = ~value._1;
    return value;
}

u16 u16_sll(u16 value, u8 amount){
    u16 result;

    // Assumes 8-bit cells and wrapping of course
    if(amount < 8){
        // 0..=7
        u8 between = (value._0 >> (8 - amount)); // Ok, as wrap around will work
        result._1 = (value._1 << amount) + between;
        result._0 = value._0 << amount;
    } else if(amount < 16){
        // 8..=15
        u8 count = amount - 8;
        result._1 = value._0 << count;
        result._0 = 0;
    } else {
        result._1 = 0;
        result._0 = 0;
    }

    return result;
}

u16 u16_srl(u16 value, u8 amount){
    u16 result;

    if(amount < 8){
        u8 between = (value._1 << (8 - amount)); // Ok, as wrap around will work
        result._1 = value._1 >> amount;
        result._0 = (value._0 >> amount) + between;
    } else if(amount < 16){
        u8 count = amount - 8;
        result._1 = 0;
        result._0 = value._1 >> count;
    } else {
        result._1 = 0;
        result._0 = 0;
    }

    return result;
}

u16 u16_mul(u16 a, u16 b){
    u1 a_bits[16];
    for(u8 i = 0; i < 8; i++){
        a_bits[sizeof a_bits - (8 + i) - 1] = (u1)( (a._1 >> i) & 1 );
    }

    for(u8 i = 0; i < 8; i++){
        a_bits[sizeof a_bits - i - 1] = (u1)( (a._0 >> i) & 1 );
    }

    u16 r = 0;

    for(u8 i = 0; i < 16; i++){
        if(a_bits[i]){
            r = u16_add(r, u16_sll(b, 15 - i));
        }
    }

    return r;
}

u1 u16_eq(u16 a, u16 b){
    return a._0 == b._0 && a._1 == b._1;
}

u16 u16_div(u16 a, u16 b){
    u16 r = 0;

    if(u16_eq(b, 0)){
        r = 0;
        a = 0;
    }

    if(u16_eq(b, 1)){
        r = a;
        a = 0;
    }

    u16 limits[14];
    u16 multipliers[14];

    limits[0] = 4;
    multipliers[0] = 16384;

    limits[1] = 8;
    multipliers[1] = 8192;

    limits[2] = 16;
    multipliers[2] = 4096;

    limits[3] = 32;
    multipliers[3] = 2048;

    limits[4] = 64;
    multipliers[4] = 1024;

    limits[5] = 128;
    multipliers[5] = 512;

    limits[6] = 256;
    multipliers[6] = 256;

    limits[7] = 512;
    multipliers[7] = 128;

    limits[8] = 1024;
    multipliers[8] = 64;

    limits[9] = 2048;
    multipliers[9] = 32;

    limits[10] = 4096;
    multipliers[10] = 16;

    limits[11] = 8192;
    multipliers[11] = 8;

    limits[12] = 16384;
    multipliers[12] = 4;

    limits[13] = 32768;
    multipliers[13] = 2;

    for(u8 i = 0; i < 14; i++){
        if(u16_lt(b, limits[i])){
            u16 multiplier = multipliers[i];
            u16 scaled = u16_mul(multiplier, b);

            if(u16_gte(a, scaled)){
                a = u16_sub(a, scaled);
                r = u16_add(r, multiplier);
            }
        }
    }

    while(u16_gte(a, b)){
        a = u16_sub(a, b);
        r = u16_add(r, 1);
    }

    return r;
}

u16 u16_mod(u16 a, u16 b){
    return u16_sub(a, u16_mul(u16_div(a, b), b));
}

u1 u16_gt(u16 a, u16 b){
    return a._1 > b._1 || (a._1 == b._1 && a._0 > b._0);
}

u1 u16_gte(u16 a, u16 b){
    return a._1 > b._1 || (a._1 == b._1 && a._0 >= b._0);
}

u1 u16_lt(u16 a, u16 b){
    return a._1 < b._1 || (a._1 == b._1 && a._0 < b._0);
}

u1 u16_lte(u16 a, u16 b){
    return a._1 < b._1 || (a._1 == b._1 && a._0 <= b._0);
}

u0 printhexdigit(u8 digit){
    if(digit < 10){
        put('0' + digit);
    } else {
        put('A' + (digit - 10));
    }
}

u0 printu8hex(u8 value){
    u8 divided = value / 16;
    printhexdigit(divided % 16);
    printhexdigit(value - divided * 16);
}

u0 printu16(u16 value){
    u8 digits[5];

    for(u8 i = sizeof digits - 1; i != 255; i--){
        u16 divided = u16_div(value, 10);
        u16 modded = u16_sub(value, u16_mul(divided, 10));
        digits[i] = modded._0;
        value = divided;
    }

    u8 first = 0;

    while(first < sizeof digits - 1 && digits[first] == 0){
        first++;
    }

    for(u8 i = first; i < sizeof digits; i++){
        put('0' + digits[i]);
    }
}

u0 printu32(u32 value){
    u8 digits[10];

    for(u8 i = sizeof digits - 1; i != 255; i--){
        u32 divided = u32_div(value, 10);
        u32 modded = u32_sub(value, u32_mul(divided, 10));
        digits[i] = modded._0;
        value = divided;
    }

    u8 first = 0;

    while(first < sizeof digits - 1 && digits[first] == 0){
        first++;
    }

    for(u8 i = first; i < sizeof digits; i++){
        put('0' + digits[i]);
    }
}

u0 printu16hex(u16 value){
    printu8hex(value._1);
    printu8hex(value._0);
}

u0 printu8bin(u8 value){
    u8 digits[8];

    for(u8 i = 0; i < sizeof digits; i++){
        digits[i] = '0';
    }

    u8 powers[8];
    powers[0] = 127;
    powers[1] = 63;
    powers[2] = 31;
    powers[3] = 15;
    powers[4] = 7;
    powers[5] = 3;
    powers[6] = 1;
    powers[7] = 0;

    for(u8 i = 0; i != sizeof digits; i++){
        u8 power = powers[i];
        if(value > power){
            value -= power + 1;
            digits[i]++;
        }
    }

    for(u8 i = 0; i != sizeof digits; i++){
        put(digits[i]);
    }
}

u0 printu16bin(u16 value){
    printu8bin(value._1);
    put(' ');
    printu8bin(value._0);
}

u32 u32_add_u16s(u16 a, u16 b){
    u16 x = a + b;
    u32 r;
    r._3 = 0;
    r._2 = (u8) (x < a || x < b);
    r._1 = x._1;
    r._0 = x._0;
    return r;
}

u32 u32_add(u32 a, u32 b){
    u32 r = u32_add_u16s(a._0u16, b._0u16);
    r._1u16 += a._1u16 + b._1u16;
    return r;
}

u32 u32_bit_and(u32 a, u32 b){
    u32 result;
    result._3 = a._3 & b._3;
    result._2 = a._2 & b._2;
    result._1 = a._1 & b._1;
    result._0 = a._0 & b._0;
    return result;
}

u32 u32_bit_or(u32 a, u32 b){
    u32 result;
    result._3 = a._3 | b._3;
    result._2 = a._2 | b._2;
    result._1 = a._1 | b._1;
    result._0 = a._0 | b._0;
    return result;
}

u32 u32_bit_xor(u32 a, u32 b){
    u32 result;
    result._3 = a._3 ^ b._3;
    result._2 = a._2 ^ b._2;
    result._1 = a._1 ^ b._1;
    result._0 = a._0 ^ b._0;
    return result;
}

u32 u32_bit_neg(u32 value){
    value._0 = ~value._0;
    value._1 = ~value._1;
    value._2 = ~value._2;
    value._3 = ~value._3;
    return value;
}

u0 printu32hex(u32 value){
    printu8hex(value._3);
    printu8hex(value._2);
    printu8hex(value._1);
    printu8hex(value._0);
}

u0 printu32bin(u32 value){
    printu8bin(value._3);
    put(' ');
    printu8bin(value._2);
    put(' ');
    printu8bin(value._1);
    put(' ');
    printu8bin(value._0);
}

u32 u32_bit_neg(u32 value){
    value._0 = ~value._0;
    value._1 = ~value._1;
    value._2 = ~value._2;
    value._3 = ~value._3;
    return value;
}

u32 u32_sub(u32 a, u32 b){
    u32 negative_b = u32_add(u32_bit_neg(b), 1);
    return u32_add(a, negative_b);
}

u32 u32_sll(u32 value, u8 amount){
    u32 result;

    if(amount < 8){
        // 0..=7
        u8 between01 = (value._0 >> (8 - amount));
        u8 between12 = (value._1 >> (8 - amount));
        u8 between23 = (value._2 >> (8 - amount));
        result._3 = (value._3 << amount) + between23;
        result._2 = (value._2 << amount) + between12;
        result._1 = (value._1 << amount) + between01;
        result._0 = (value._0 << amount);
    } else if(amount < 16){
        // 8..=15
        u8 between01 = (value._0 >> (16 - amount));
        u8 between12 = (value._1 >> (16 - amount));
        result._3 = (value._2 << amount - 8) + between12;
        result._2 = (value._1 << amount - 8) + between01;
        result._1 = (value._0 << amount - 8);
        result._0 = 0;
    } else if(amount < 24){
        // 16..=23
        u8 between01 = (value._0 >> (24 - amount));
        result._3 = (value._1 << amount - 16) + between01;
        result._2 = (value._0 << amount - 16);
        result._1 = 0;
        result._0 = 0;
    } else if(amount < 32){
        // 23..=31
        result._3 = (value._0 << amount - 24);
        result._2 = 0;
        result._1 = 0;
        result._0 = 0;
    } else {
        result = 0;
    }

    return result;
}

u32 u32_srl(u32 value, u8 amount){
    u32 result;

    if(amount < 8){
        // 0..=7
        u8 between01 = (value._1 << (8 - amount));
        u8 between12 = (value._2 << (8 - amount));
        u8 between23 = (value._3 << (8 - amount));
        result._3 = (value._3 >> amount);
        result._2 = (value._2 >> amount) + between23;
        result._1 = (value._1 >> amount) + between12;
        result._0 = (value._0 >> amount) + between01;
    } else if(amount < 16){
        // 8..=15
        u8 between01 = (value._2 << (16 - amount));
        u8 between12 = (value._3 << (16 - amount));
        result._3 = 0;
        result._2 = (value._3 >> amount - 8);
        result._1 = (value._2 >> amount - 8) + between12;
        result._0 = (value._1 >> amount - 8) + between01;
    } else if(amount < 24){
        // 16..=23
        u8 between01 = (value._3 << (24 - amount));
        result._3 = 0;
        result._2 = 0;
        result._1 = (value._3 >> amount - 16);
        result._0 = (value._2 >> amount - 16) + between01;
    } else if(amount < 32){
        // 23..=31
        result._3 = 0;
        result._2 = 0;
        result._1 = 0;
        result._0 = (value._3 >> amount - 24);
    } else {
        result = 0;
    }

    return result;
}

u32 u32_mul(u32 a, u32 b){
    u1 a_bits[32];

    for(u8 i = 0; i < 8; i++){
        a_bits[sizeof a_bits - (24 + i) - 1] = (u1)( (a._3 >> i) & 1 );
    }

    for(u8 i = 0; i < 8; i++){
        a_bits[sizeof a_bits - (16 + i) - 1] = (u1)( (a._2 >> i) & 1 );
    }

    for(u8 i = 0; i < 8; i++){
        a_bits[sizeof a_bits - (8 + i) - 1] = (u1)( (a._1 >> i) & 1 );
    }

    for(u8 i = 0; i < 8; i++){
        a_bits[sizeof a_bits - i - 1] = (u1)( (a._0 >> i) & 1 );
    }

    u32 r = 0;

    for(u8 i = 0; i < sizeof a_bits; i++){
        if(a_bits[i]){
            r = u32_add(r, u32_sll(b, 31 - i));
        }
    }

    return r;
}

u1 u32_gt(u32 a, u32 b){
    return a._1u16 > b._1u16 || (a._1u16 == b._1u16 && a._0u16 > b._0u16);
}

u1 u32_gte(u32 a, u32 b){
    return a._1u16 > b._1u16 || (a._1u16 == b._1u16 && a._0u16 >= b._0u16);
}

u1 u32_lt(u32 a, u32 b){
    return !u32_gte(a, b);
}

u1 u32_lte(u32 a, u32 b){
    return !u32_gt(a, b);
}

u1 u32_eq(u32 a, u32 b){
    return a._0u16 == b._0u16 && a._1u16 == b._1u16;
}

u32 u32_div(u32 a, u32 b){
    u32 r = 0;

    if(u32_eq(b, 0)){
        r = 0;
        a = 0;
    }

    if(u32_eq(b, 1)){
        r = a;
        a = 0;
    }

    u32 limits[30];
    u32 multipliers[30];

    limits[0] = 4;
    multipliers[0] = 1073741824;
    limits[1] = 8;
    multipliers[1] = 536870912;
    limits[2] = 16;
    multipliers[2] = 268435456;
    limits[3] = 32;
    multipliers[3] = 134217728;
    limits[4] = 64;
    multipliers[4] = 67108864;
    limits[5] = 128;
    multipliers[5] = 33554432;
    limits[6] = 256;
    multipliers[6] = 16777216;
    limits[7] = 512;
    multipliers[7] = 8388608;
    limits[8] = 1024;
    multipliers[8] = 4194304;
    limits[9] = 2048;
    multipliers[9] = 2097152;
    limits[10] = 4096;
    multipliers[10] = 1048576;
    limits[11] = 8192;
    multipliers[11] = 524288;
    limits[12] = 16384;
    multipliers[12] = 262144;
    limits[13] = 32768;
    multipliers[13] = 131072;
    limits[14] = 65536;
    multipliers[14] = 65536;
    limits[15] = 131072;
    multipliers[15] = 32768;
    limits[16] = 262144;
    multipliers[16] = 16384;
    limits[17] = 524288;
    multipliers[17] = 8192;
    limits[18] = 1048576;
    multipliers[18] = 4096;
    limits[19] = 2097152;
    multipliers[19] = 2048;
    limits[20] = 4194304;
    multipliers[20] = 1024;
    limits[21] = 8388608;
    multipliers[21] = 512;
    limits[22] = 16777216;
    multipliers[22] = 256;
    limits[23] = 33554432;
    multipliers[23] = 128;
    limits[24] = 67108864;
    multipliers[24] = 64;
    limits[25] = 134217728;
    multipliers[25] = 32;
    limits[26] = 268435456;
    multipliers[26] = 16;
    limits[27] = 536870912;
    multipliers[27] = 8;
    limits[28] = 1073741824;
    multipliers[28] = 4;
    limits[29] = 2147483648;
    multipliers[29] = 2;

    for(u8 i = 0; i < 30; i++){
        if(u32_lt(b, limits[i])){
            u32 multiplier = multipliers[i];
            u32 scaled = u32_mul(multiplier, b);

            if(u32_gte(a, scaled)){
                a = u32_sub(a, scaled);
                r = u32_add(r, multiplier);
            }
        }
    }

    while(u32_gte(a, b)){
        a = u32_sub(a, b);
        r = u32_add(r, 1);
    }

    return r;
}

u32 u32_mod(u32 a, u32 b){
    return u32_sub(a, u32_mul(u32_div(a, b), b));
}

